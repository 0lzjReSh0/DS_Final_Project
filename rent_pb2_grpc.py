# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rent_pb2 as rent__pb2


class RentalServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRentalInfo = channel.unary_unary(
                '/rent.RentalService/GetRentalInfo',
                request_serializer=rent__pb2.RegionRequest.SerializeToString,
                response_deserializer=rent__pb2.RentalList.FromString,
                )
        self.CommunicateWithOwner = channel.unary_unary(
                '/rent.RentalService/CommunicateWithOwner',
                request_serializer=rent__pb2.OwnerQuery.SerializeToString,
                response_deserializer=rent__pb2.OwnerInfo.FromString,
                )
        self.GetRentalDetails = channel.unary_unary(
                '/rent.RentalService/GetRentalDetails',
                request_serializer=rent__pb2.RentalQuery.SerializeToString,
                response_deserializer=rent__pb2.RentalInfo.FromString,
                )
        self.IsLandlordOnline = channel.unary_unary(
                '/rent.RentalService/IsLandlordOnline',
                request_serializer=rent__pb2.OwnerQuery.SerializeToString,
                response_deserializer=rent__pb2.OwnerOnlineStatus.FromString,
                )
        self.StartChat = channel.unary_stream(
                '/rent.RentalService/StartChat',
                request_serializer=rent__pb2.ChatInitiationRequest.SerializeToString,
                response_deserializer=rent__pb2.ChatMessage.FromString,
                )
        self.StartRealTimeChat = channel.stream_stream(
                '/rent.RentalService/StartRealTimeChat',
                request_serializer=rent__pb2.ChatMessage.SerializeToString,
                response_deserializer=rent__pb2.ChatMessage.FromString,
                )
        self.GetMyRentals = channel.unary_unary(
                '/rent.RentalService/GetMyRentals',
                request_serializer=rent__pb2.UserRequest.SerializeToString,
                response_deserializer=rent__pb2.RentalList.FromString,
                )
        self.GetAllMessages = channel.unary_unary(
                '/rent.RentalService/GetAllMessages',
                request_serializer=rent__pb2.UserRequest.SerializeToString,
                response_deserializer=rent__pb2.MessageList.FromString,
                )
        self.DeleteRental = channel.unary_unary(
                '/rent.RentalService/DeleteRental',
                request_serializer=rent__pb2.RentalDeleteRequest.SerializeToString,
                response_deserializer=rent__pb2.ActionResponse.FromString,
                )
        self.AddRental = channel.unary_unary(
                '/rent.RentalService/AddRental',
                request_serializer=rent__pb2.RentalEntry.SerializeToString,
                response_deserializer=rent__pb2.ActionResponse.FromString,
                )


class RentalServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetRentalInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommunicateWithOwner(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRentalDetails(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsLandlordOnline(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartChat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartRealTimeChat(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMyRentals(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRental(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddRental(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RentalServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRentalInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRentalInfo,
                    request_deserializer=rent__pb2.RegionRequest.FromString,
                    response_serializer=rent__pb2.RentalList.SerializeToString,
            ),
            'CommunicateWithOwner': grpc.unary_unary_rpc_method_handler(
                    servicer.CommunicateWithOwner,
                    request_deserializer=rent__pb2.OwnerQuery.FromString,
                    response_serializer=rent__pb2.OwnerInfo.SerializeToString,
            ),
            'GetRentalDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRentalDetails,
                    request_deserializer=rent__pb2.RentalQuery.FromString,
                    response_serializer=rent__pb2.RentalInfo.SerializeToString,
            ),
            'IsLandlordOnline': grpc.unary_unary_rpc_method_handler(
                    servicer.IsLandlordOnline,
                    request_deserializer=rent__pb2.OwnerQuery.FromString,
                    response_serializer=rent__pb2.OwnerOnlineStatus.SerializeToString,
            ),
            'StartChat': grpc.unary_stream_rpc_method_handler(
                    servicer.StartChat,
                    request_deserializer=rent__pb2.ChatInitiationRequest.FromString,
                    response_serializer=rent__pb2.ChatMessage.SerializeToString,
            ),
            'StartRealTimeChat': grpc.stream_stream_rpc_method_handler(
                    servicer.StartRealTimeChat,
                    request_deserializer=rent__pb2.ChatMessage.FromString,
                    response_serializer=rent__pb2.ChatMessage.SerializeToString,
            ),
            'GetMyRentals': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMyRentals,
                    request_deserializer=rent__pb2.UserRequest.FromString,
                    response_serializer=rent__pb2.RentalList.SerializeToString,
            ),
            'GetAllMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllMessages,
                    request_deserializer=rent__pb2.UserRequest.FromString,
                    response_serializer=rent__pb2.MessageList.SerializeToString,
            ),
            'DeleteRental': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRental,
                    request_deserializer=rent__pb2.RentalDeleteRequest.FromString,
                    response_serializer=rent__pb2.ActionResponse.SerializeToString,
            ),
            'AddRental': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRental,
                    request_deserializer=rent__pb2.RentalEntry.FromString,
                    response_serializer=rent__pb2.ActionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rent.RentalService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RentalService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetRentalInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rent.RentalService/GetRentalInfo',
            rent__pb2.RegionRequest.SerializeToString,
            rent__pb2.RentalList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CommunicateWithOwner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rent.RentalService/CommunicateWithOwner',
            rent__pb2.OwnerQuery.SerializeToString,
            rent__pb2.OwnerInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRentalDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rent.RentalService/GetRentalDetails',
            rent__pb2.RentalQuery.SerializeToString,
            rent__pb2.RentalInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsLandlordOnline(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rent.RentalService/IsLandlordOnline',
            rent__pb2.OwnerQuery.SerializeToString,
            rent__pb2.OwnerOnlineStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rent.RentalService/StartChat',
            rent__pb2.ChatInitiationRequest.SerializeToString,
            rent__pb2.ChatMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartRealTimeChat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/rent.RentalService/StartRealTimeChat',
            rent__pb2.ChatMessage.SerializeToString,
            rent__pb2.ChatMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMyRentals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rent.RentalService/GetMyRentals',
            rent__pb2.UserRequest.SerializeToString,
            rent__pb2.RentalList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rent.RentalService/GetAllMessages',
            rent__pb2.UserRequest.SerializeToString,
            rent__pb2.MessageList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRental(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rent.RentalService/DeleteRental',
            rent__pb2.RentalDeleteRequest.SerializeToString,
            rent__pb2.ActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddRental(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rent.RentalService/AddRental',
            rent__pb2.RentalEntry.SerializeToString,
            rent__pb2.ActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
